// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ChannelsGetParams is parameters of GET /channels operation.
type ChannelsGetParams struct {
	// Comma-separated list of channel IDs.
	Ids OptString
}

func unpackChannelsGetParams(packed middleware.Parameters) (params ChannelsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "ids",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Ids = v.(OptString)
		}
	}
	return params
}

func decodeChannelsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params ChannelsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: ids.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "ids",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIdsVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIdsVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Ids.SetTo(paramsDotIdsVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ids",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ClipsGetParams is parameters of GET /clips operation.
type ClipsGetParams struct {
	// Start Date.
	StartDate string
	// End Date.
	EndDate OptString
}

func unpackClipsGetParams(packed middleware.Parameters) (params ClipsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "start_date",
			In:   "query",
		}
		params.StartDate = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "end_date",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.EndDate = v.(OptString)
		}
	}
	return params
}

func decodeClipsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params ClipsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: start_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "start_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.StartDate = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "start_date",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: end_date.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "end_date",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotEndDateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotEndDateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.EndDate.SetTo(paramsDotEndDateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "end_date",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
