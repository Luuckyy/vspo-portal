// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ChannelsChannelIDClipsGet implements GET /channels/{channel_id}/clips operation.
	//
	// Retrieve all clips related to a specific channel.
	//
	// GET /channels/{channel_id}/clips
	ChannelsChannelIDClipsGet(ctx context.Context, params ChannelsChannelIDClipsGetParams) (ChannelsChannelIDClipsGetRes, error)
	// ChannelsChannelIDClipsPut implements PUT /channels/{channel_id}/clips operation.
	//
	// Update clips related to a specific channel based on provided cronType.
	//
	// PUT /channels/{channel_id}/clips
	ChannelsChannelIDClipsPut(ctx context.Context, req *ChannelsChannelIDClipsPutReq, params ChannelsChannelIDClipsPutParams) (ChannelsChannelIDClipsPutRes, error)
	// ChannelsChannelIDSongsGet implements GET /channels/{channel_id}/songs operation.
	//
	// Retrieve all songs related to a specific channel.
	//
	// GET /channels/{channel_id}/songs
	ChannelsChannelIDSongsGet(ctx context.Context, params ChannelsChannelIDSongsGetParams) (ChannelsChannelIDSongsGetRes, error)
	// ChannelsChannelIDSongsPost implements POST /channels/{channel_id}/songs operation.
	//
	// Creates songs related to a specific channel by fetching from Youtube using provided Video IDs.
	//
	// POST /channels/{channel_id}/songs
	ChannelsChannelIDSongsPost(ctx context.Context, req *ChannelsChannelIDSongsPostReq, params ChannelsChannelIDSongsPostParams) (ChannelsChannelIDSongsPostRes, error)
	// ChannelsChannelIDSongsPut implements PUT /channels/{channel_id}/songs operation.
	//
	// Update songs related to a specific channel based on provided cronType.
	//
	// PUT /channels/{channel_id}/songs
	ChannelsChannelIDSongsPut(ctx context.Context, req *ChannelsChannelIDSongsPutReq, params ChannelsChannelIDSongsPutParams) (ChannelsChannelIDSongsPutRes, error)
	// ChannelsGet implements GET /channels operation.
	//
	// Retrieves all channels based on provided IDs.
	//
	// GET /channels
	ChannelsGet(ctx context.Context, params ChannelsGetParams) (ChannelsGetRes, error)
	// ChannelsPost implements POST /channels operation.
	//
	// Creates channels by fetching from Youtube using provided Channel IDs.
	//
	// POST /channels
	ChannelsPost(ctx context.Context, req *ChannelsPostReq) (ChannelsPostRes, error)
	// ChannelsPut implements PUT /channels operation.
	//
	// Updates channels by fetching from Youtube using provided Channel IDs.
	//
	// PUT /channels
	ChannelsPut(ctx context.Context, req *ChannelsPutReq) (ChannelsPutRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
