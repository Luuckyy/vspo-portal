// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeChannelsChannelIDClipsGetResponse(resp *http.Response) (res ChannelsChannelIDClipsGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response VideosResponse
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsChannelIDClipsGetBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsChannelIDClipsGetUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsChannelIDClipsGetForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsChannelIDClipsGetNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsChannelIDClipsGetInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsChannelIDClipsPutResponse(resp *http.Response) (res ChannelsChannelIDClipsPutRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChannelsChannelIDClipsPutOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsChannelIDClipsPutBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsChannelIDClipsPutUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsChannelIDClipsPutForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsChannelIDClipsPutNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsChannelIDClipsPutInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsChannelIDSongsGetResponse(resp *http.Response) (res ChannelsChannelIDSongsGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response VideosResponse
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsChannelIDSongsGetBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsChannelIDSongsGetUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsChannelIDSongsGetForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsChannelIDSongsGetNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsChannelIDSongsGetInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsChannelIDSongsPostResponse(resp *http.Response) (res ChannelsChannelIDSongsPostRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChannelsChannelIDSongsPostOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsChannelIDSongsPostBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsChannelIDSongsPostUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsChannelIDSongsPostForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsChannelIDSongsPostNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsChannelIDSongsPostInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsChannelIDSongsPutResponse(resp *http.Response) (res ChannelsChannelIDSongsPutRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChannelsChannelIDSongsPutOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsChannelIDSongsPutBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsChannelIDSongsPutUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsChannelIDSongsPutForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsChannelIDSongsPutNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsChannelIDSongsPutInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsGetResponse(resp *http.Response) (res ChannelsGetRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChannelsResponse
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsGetBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsGetUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsGetForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsGetNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsGetInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsPostResponse(resp *http.Response) (res ChannelsPostRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChannelsPostOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsPostBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsPostUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsPostForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsPostNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsPostInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeChannelsPutResponse(resp *http.Response) (res ChannelsPutRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response ChannelsPutOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 400:
		// Code 400.
		return &ChannelsPutBadRequest{}, nil
	case 401:
		// Code 401.
		return &ChannelsPutUnauthorized{}, nil
	case 403:
		// Code 403.
		return &ChannelsPutForbidden{}, nil
	case 404:
		// Code 404.
		return &ChannelsPutNotFound{}, nil
	case 500:
		// Code 500.
		return &ChannelsPutInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
