/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/channels": {
    /** Retrieves all channels based on provided IDs. */
    get: {
      parameters: {
        query: {
          /** Comma-separated list of channel IDs */
          ids?: string[];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["handlers.ChannelsResponse"];
        };
      };
    };
    /** Updates channels by fetching from Youtube using provided Channel IDs. */
    put: {
      parameters: {
        body: {
          /** Array of Channel IDs */
          channelIds: string[];
        };
      };
      responses: {
        /** Channels updated successfully */
        200: {
          schema: string;
        };
      };
    };
    /** Creates channels by fetching from Youtube using provided Channel IDs. */
    post: {
      parameters: {
        body: {
          /** Array of Channel IDs */
          channelIds: string[];
        };
      };
      responses: {
        /** Channels created successfully */
        200: {
          schema: string;
        };
      };
    };
  };
  "/clips": {
    /** Retrieve all clips */
    get: {
      parameters: {
        query: {
          /** Start Date */
          start_date: string;
          /** End Date */
          end_date?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["github_com_sugar-cat7_vspo-common-api_infrastructure_http_handlers_clip.VideosResponse"];
        };
      };
    };
    /** Update clips based on provided cronType */
    put: {
      parameters: {
        body: {
          /** Type of the cron */
          cronType: string;
        };
      };
      responses: {
        /** Clips updated successfully */
        200: {
          schema: string;
        };
      };
    };
  };
  "/songs": {
    /** Retrieve all songs */
    get: {
      responses: {
        /** OK */
        200: {
          schema: definitions["github_com_sugar-cat7_vspo-common-api_infrastructure_http_handlers_song.VideosResponse"];
        };
      };
    };
    /** Update songs based on provided cronType */
    put: {
      parameters: {
        body: {
          /** Type of the cron */
          cronType: string;
        };
      };
      responses: {
        /** Songs updated successfully */
        200: {
          schema: string;
        };
      };
    };
    /** Updates songs by fetching from Youtube using provided Video IDs. */
    post: {
      parameters: {
        body: {
          /** Array of Video IDs */
          videoIds: string[];
        };
      };
      responses: {
        /** Songs updated successfully */
        200: {
          schema: string;
        };
      };
    };
  };
}

export interface definitions {
  "github_com_sugar-cat7_vspo-common-api_infrastructure_http_handlers_clip.VideosResponse": {
    videos?: definitions["mappers.VideoResponse"][];
  };
  "github_com_sugar-cat7_vspo-common-api_infrastructure_http_handlers_song.VideosResponse": {
    videos?: definitions["mappers.VideoResponse"][];
  };
  "handlers.ChannelsResponse": {
    channels?: definitions["mappers.ChannelResponse"][];
  };
  "mappers.ChannelResponse": {
    /** @example UCiMG6VdScBabPhJ1ZtaVmbw */
    id?: string;
    snippet?: definitions["mappers.ChannelSnippetResponse"];
    statistics?: definitions["mappers.ChannelStatisticsResponse"];
  };
  "mappers.ChannelSnippetResponse": {
    /** @example @nazunakaga */
    customUrl?: string;
    /**
     * @example ぶいすぽ所属　最年少！５歳可愛い担当花芽なずなです♡
     *
     * 好きなゲームはFPS全般！
     */
    description?: string;
    /** @example 2018-09-20T11:41:24Z */
    publishedAt?: string;
    thumbnails?: definitions["mappers.ThumbnailsResponse"];
    /** @example 花芽なずな / Nazuna Kaga */
    title?: string;
  };
  "mappers.ChannelStatisticsResponse": {
    /** @example false */
    hiddenSubscriberCount?: boolean;
    /** @example 357000 */
    subscriberCount?: string;
    /** @example 1183 */
    videoCount?: string;
    /** @example 59373115 */
    viewCount?: string;
  };
  "mappers.ThumbnailResponse": {
    /** @example 90 */
    height?: number;
    /** @example https://i.ytimg.com/vi/Qh6aSTTkmEs/default.jpg */
    url?: string;
    /** @example 120 */
    width?: number;
  };
  "mappers.ThumbnailsResponse": {
    default?: definitions["mappers.ThumbnailResponse"];
    high?: definitions["mappers.ThumbnailResponse"];
    maxres?: definitions["mappers.ThumbnailResponse"];
    medium?: definitions["mappers.ThumbnailResponse"];
    standard?: definitions["mappers.ThumbnailResponse"];
  };
  "mappers.VideoResponse": {
    /** @example UCiMG6VdScBabPhJ1ZtaVmbw */
    channelId?: string;
    /** @example 花芽なずな / Nazuna Kaga */
    channelTitle?: string;
    /** @example */
    description?: string;
    /** @example Qh6aSTTkmEs */
    id?: string;
    /** @example 2020-12-31T12:34:56+09:00 */
    publishedAt?: string;
    /**
     * @example [
     *   "[ぶいすぽっ！",
     *   " 歌ってみた]"
     * ]
     */
    tags?: string[];
    thumbnails?: definitions["mappers.ThumbnailsResponse"];
    /** @example 【ぶいすぽっ！】Blessing ~12人で歌ってみた~ */
    title?: string;
    viewCount?: definitions["mappers.ViewsResponse"];
  };
  "mappers.ViewsResponse": {
    /** @example 1000 */
    daily?: string;
    /** @example 100000 */
    monthly?: string;
    /** @example 1000000 */
    total?: string;
    /** @example 10000 */
    weekly?: string;
  };
}

export interface operations {}

export interface external {}
